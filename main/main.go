// https://www.hackerrank.com/challenges/fair-rations/problem

package main

import "fmt"

func fairRations(B []int32) int32 {
	var count int32

	for i := 0; i < len(B); i++ {
		if B[i]%2 == 1 {
			// If it has reached end of array, and the lsat array is still an odd number, then it is impossible already.
			if i == len(B)-1 {
				return -1
			} else {
				B[i] ++
				B[i+1]++
				count += 2
			}
		}
	}

	return count
}

func main() {
	fmt.Println(fairRations([]int32{2, 3, 4, 5, 6}))
	fmt.Println(fairRations([]int32{8, 2, 2, 2, 10, 2, 10, 4, 6, 6, 10, 4, 2, 6, 2, 6, 2, 6, 10, 2, 4, 8, 2, 4, 10, 10, 10, 4, 10, 2, 4, 2, 2, 6, 10, 2, 8, 8, 8, 4, 8, 4, 10, 8, 4, 2, 6, 8, 4, 8, 8, 6, 2, 4, 10, 4, 8, 4, 4, 10, 4, 2, 8, 6, 8, 2, 6, 6, 6, 6, 4, 8, 4, 10, 6, 2, 2, 8, 4, 8, 6, 2, 2, 4, 10, 6, 8, 2, 10, 4, 4, 6, 4, 4, 2, 2, 4, 6, 2, 6, 4, 4, 6, 6, 10, 4, 10, 4, 4, 6, 2, 2, 4, 8, 6, 8, 8, 2, 10, 6, 10, 2, 4, 8, 2, 10, 2, 6, 10, 2, 2, 2, 6, 8, 2, 8, 2, 4, 2, 2, 8, 10, 8, 2, 10, 4, 8, 6, 2, 6, 10, 6, 6, 10, 6, 10, 10, 2, 10, 2, 4, 2, 2, 8, 2, 2, 4, 4, 10, 8, 6, 2, 8, 2, 8, 6, 4, 10, 6, 10, 8, 10, 8, 2, 8, 10, 4, 10, 2, 10, 4, 8, 6, 2, 10, 4, 8, 6, 2, 2, 2, 4, 8, 10, 10, 10, 4, 2, 8, 2, 6, 8, 4, 4, 4, 8, 10, 8, 2, 6, 4, 10, 4, 8, 10, 10, 2, 4, 2, 2, 4, 6, 6, 2, 8, 4, 2, 4, 10, 2, 10, 6, 8, 10, 10, 8, 2, 2, 6, 10, 4, 10, 10, 6, 8, 4, 4, 2, 4, 6, 2, 10, 2, 6, 8, 2, 6, 6, 4, 2, 2, 10, 6, 4, 4, 2, 2, 2, 6, 6, 4, 4, 6, 6, 10, 6, 4, 8, 2, 10, 4, 4, 6, 10, 6, 8, 4, 2, 8, 4, 10, 4, 2, 10, 6, 6, 10, 2, 2, 8, 6, 6, 2, 10, 6, 6, 10, 10, 8, 10, 2, 8, 2, 6, 6, 2, 2, 6, 6, 10, 2, 4, 6, 6, 2, 8, 4, 4, 2, 8, 2, 10, 6, 10, 6, 2, 6, 8, 10, 4, 4, 2, 10, 4, 8, 6, 8, 6, 8, 4, 10, 6, 4, 10, 4, 10, 8, 10, 6, 2, 4, 8, 4, 6, 8, 8, 4, 2, 4, 10, 6, 4, 4, 4, 2, 10, 10, 2, 2, 6, 10, 2, 4, 2, 10, 2, 6, 6, 2, 4, 10, 10, 10, 10, 2, 2, 6, 8, 6, 2, 8, 10, 2, 8, 6, 2, 10, 2, 8, 6, 10, 8, 10, 4, 4, 2, 6, 4, 6, 10, 6, 8, 10, 10, 6, 8, 8, 8, 8, 4, 6, 6, 10, 2, 6, 6, 10, 6, 10, 6, 6, 4, 4, 4, 2, 10, 8, 2, 8, 8, 8, 2, 8, 2, 8, 6, 10, 8, 10, 8, 8, 10, 10, 2, 6, 8, 2, 4, 4, 8, 6, 6, 8, 10, 6, 6, 10, 4, 6, 6, 6, 10, 2, 6, 8, 10, 6, 4, 8, 8, 4, 6, 4, 6, 8, 2, 2, 2, 6, 6, 10, 10, 6, 10, 8, 6, 10, 6, 4, 10, 2, 8, 8, 6, 4, 2, 6, 10, 6, 8, 4, 10, 2, 10, 6, 10, 4, 10, 6, 2, 8, 2, 2, 10, 8, 8, 6, 2, 8, 2, 4, 8, 2, 2, 2, 2, 8, 10, 10, 6, 4, 8, 2, 2, 8, 4, 6, 8, 2, 6, 4, 2, 4, 4, 6, 8, 8, 10, 6, 10, 4, 8, 4, 2, 2, 10, 8, 4, 10, 4, 8, 4, 8, 10, 4, 2, 6, 2, 8, 2, 6, 8, 10, 4, 10, 6, 6, 2, 2, 10, 8, 2, 10, 4, 4, 8, 8, 2, 8, 2, 4, 8, 10, 6, 2, 10, 2, 10, 10, 2, 10, 6, 8, 6, 6, 4, 8, 6, 6, 2, 2, 6, 8, 8, 2, 6, 4, 4, 8, 8, 2, 10, 2, 10, 8, 6, 2, 10, 10, 4, 6, 8, 8, 10, 4, 8, 6, 2, 10, 6, 8, 10, 6, 4, 10, 2, 8, 10, 2, 10, 6, 8, 10, 8, 4, 2, 8, 4, 8, 8, 8, 8, 2, 10, 4, 6, 6, 8, 8, 10, 10, 4, 6, 10, 6, 4, 4, 8, 10, 4, 10, 2, 4, 8, 6, 10, 8, 6, 2, 4, 8, 2, 4, 6, 8, 2, 6, 2, 10, 2, 6, 6, 10, 4, 8, 8, 8, 4, 8, 8, 10, 4, 10, 2, 4, 4, 4, 6, 4, 10, 8, 8, 6, 4, 6, 6, 2, 6, 8, 2, 2, 2, 2, 4, 4, 4, 2, 10, 2, 8, 4, 8, 2, 8, 6, 2, 10, 2, 6, 8, 2, 2, 6, 2, 8, 10, 4, 6, 6, 2, 10, 8, 8, 10, 2, 6, 6, 10, 8, 10, 8, 4, 8, 8, 4, 6, 8, 4, 2, 6, 8, 4, 8, 8, 10, 6, 10, 8, 8, 8, 2, 8, 2, 4, 10, 4, 8, 10, 10, 4, 4, 10, 2, 4, 10, 2, 10, 10, 2, 6, 8, 6, 4, 2, 6, 8, 4, 2, 2, 2, 8, 2, 4, 4, 10, 6, 2, 10, 6, 4, 10, 6, 8, 10, 6, 10, 4, 4, 6, 6, 2, 4, 4, 8, 4, 4, 8, 6, 2, 8, 6, 2, 8, 6, 10, 10, 4, 8, 10, 10, 4, 10, 4, 2, 10, 2, 10, 4, 2, 10, 10, 10, 8, 6, 4, 6, 8, 6, 10, 4, 8, 4, 10, 2, 4, 2, 8, 10, 10, 8, 8, 10, 2, 8, 4, 6, 6, 2, 4, 10, 10, 2, 6, 8, 2, 6, 4, 6, 2, 2, 6, 8, 4, 6, 2, 4, 4, 10, 10, 2, 6, 6, 6, 6, 2, 10, 2, 8, 8, 10, 4, 8, 2, 6, 4, 6, 6, 6, 8, 2, 8}))
}
